# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.name: /QOBDWeb
    app.name.base_dir: '%app.name%/public'
    resource.download_dir: '%app.name.base_dir%/ressources/download'
    file.download_dir: '%resource.download_dir%'
    file.agent.download_dir: '%resource.download_dir%/agent/avatars'
    file.setting.catalogue.download_dir: '%resource.download_dir%/setting/catalogue'
    file.setting.file.download_dir: '%resource.download_dir%/setting/files'
    file.setting.image.download_dir: '%resource.download_dir%/setting/image'
    file.pdf.bill.download_dir: '%resource.download_dir%/pdf/bill'
    file.pdf.quote.download_dir: '%resource.download_dir%/pdf/quote'
    file.pdf.delivery.download_dir: '%resource.download_dir%/pdf/delivery'
    file.setting.email: '../templates/email/files'
    file.type.download_quote: 0
    file.type.download_order: 1
    file.type.download_refund: 2
    session_max_idle_time: 1800
    secret: '%env(APP_SECRET)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $logo_dir: '%file.download_dir%/setting/image'
            $avatar_dir: '%file.download_dir%/agent/avatars'
            $catalogue_dir: '%file.download_dir%/setting/catalogue'
            $maxIdleTime: '%session_max_idle_time%'
            $root_dir: '%app.name.base_dir%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
    
    # authentication success event listener
    # app/security/interactive_login_listener:
    #     class: App\Services\SecurityManager
    #     tags:
    #         - { name: kernel.event_listener, event: security.interactive_login, method: onAuthenticationSuccess }
    
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Symfony\Component\Serializer\Normalizer\ObjectNormalizer:
    #    class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
    #    public: false
    #    tags:
    #      - { name: 'serializer.normalizer' }

    # Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer:
    #    class: Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer
    #    public: false
    #    tags:
    #      - { name: 'serializer.normalizer' }
